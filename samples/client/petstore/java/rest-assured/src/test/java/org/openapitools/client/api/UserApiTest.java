/*
 * OpenAPI Petstore
 * This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import io.restassured.builder.RequestSpecBuilder;
import io.restassured.config.LogConfig;
import io.restassured.filter.log.ErrorLoggingFilter;
import org.junit.Before;
import org.junit.Test;
import org.openapitools.client.ApiClient;
import org.openapitools.client.model.User;

import java.util.Arrays;
import java.util.List;

import static io.restassured.config.ObjectMapperConfig.objectMapperConfig;
import static io.restassured.config.RestAssuredConfig.config;
import static io.restassured.http.ContentType.JSON;
import static org.apache.http.HttpStatus.SC_OK;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.containsString;
import static org.hamcrest.Matchers.equalTo;
import static org.hamcrest.Matchers.notNullValue;
import static org.openapitools.client.GsonObjectMapper.gson;
import static org.openapitools.client.ResponseSpecBuilders.shouldBeCode;
import static org.openapitools.client.ResponseSpecBuilders.validatedWith;
import static org.openapitools.client.api.TestUtils.contentTypeJson;
import static org.openapitools.client.api.TestUtils.nextId;

/**
 * API tests for UserApi
 */
public class UserApiTest {

    private UserApi api;

    @Before
    public void createApi() {
        api = ApiClient.api(ApiClient.Config.apiConfig().reqSpecSupplier(
                () -> new RequestSpecBuilder().setConfig(config()
                        .logConfig(LogConfig.logConfig().enableLoggingOfRequestAndResponseIfValidationFails())
                        .objectMapperConfig(objectMapperConfig().defaultObjectMapper(gson())))
                        .addFilter(new ErrorLoggingFilter())
                        .setBaseUri("http://petstore.swagger.io:80/v2"))).user();
    }

    @Test
    public void createUsersWithArrayInputTest() {
        User first = getUser().id(nextId());
        User second = getUser().id(nextId());
        List<User> body = Arrays.asList(first, second);
        api.createUsersWithArrayInput().reqSpec(contentTypeJson())
                .body(body).execute(validatedWith(shouldBeCode(SC_OK)));
        api.deleteUser().usernamePath(first.getUsername()).execute(
                validatedWith(shouldBeCode(SC_OK)));
    }

    @Test
    public void createUsersWithListInputTest() {
        User first = getUser().id(nextId());
        User second = getUser().id(nextId());
        List<User> body = Arrays.asList(first, second);
        api.createUsersWithListInput().reqSpec(contentTypeJson())
                .body(body).execute(validatedWith(shouldBeCode(SC_OK)));
        api.deleteUser().usernamePath(first.getUsername()).execute(
                validatedWith(shouldBeCode(SC_OK)));
    }

    @Test
    public void createUserTest() {
        String userName = "Blah";
        User user = getUser().username(userName);
        api.createUser().body(user).reqSpec(contentTypeJson())
                .execute(validatedWith(shouldBeCode(SC_OK)));
        User fetched = api.getUserByName()
                .usernamePath(userName).executeAs(validatedWith(shouldBeCode(SC_OK)));

        assertThat(fetched, notNullValue());
        assertThat(fetched.getUsername(), equalTo(userName));
        assertThat(fetched.getPassword(), equalTo(user.getPassword()));
        assertThat(fetched.getEmail(), equalTo(user.getEmail()));
        assertThat(fetched.getFirstName(), equalTo(user.getFirstName()));
        assertThat(fetched.getLastName(), equalTo(user.getLastName()));
        assertThat(fetched.getId(), equalTo(user.getId()));
        api.deleteUser().usernamePath(user.getUsername()).execute(
                validatedWith(shouldBeCode(SC_OK)));
    }

    @Test
    public void loginTest() {
        String username = "a";
        String password = "b";
        String result = api.loginUser()
                .usernameQuery(username)
                .passwordQuery(password).executeAs(validatedWith(shouldBeCode(SC_OK)));
        assertThat(result, containsString("logged in user session"));

    }

    @Test
    public void logoutTest() {
        api.logoutUser().execute(validatedWith(shouldBeCode(SC_OK)));
    }

    @Test
    public void updateUserTest() {
        String username = "me";
        String email = "me@blah.com";
        User user = new User().username(username).email(email);
        api.createUser().body(user).reqSpec(r -> r.setContentType(JSON)).execute(validatedWith(shouldBeCode(SC_OK)));
        api.updateUser().reqSpec(contentTypeJson())
                .usernamePath(username)
                .body(user).execute(validatedWith(shouldBeCode(SC_OK)));
        User fetched = api.getUserByName().usernamePath(username).executeAs(validatedWith(shouldBeCode(SC_OK)));
        assertThat(fetched, notNullValue());
        assertThat(fetched.getUsername(), equalTo(username));
        assertThat(fetched.getEmail(), equalTo(email));
        api.deleteUser().usernamePath(user.getUsername()).execute(
                validatedWith(shouldBeCode(SC_OK)));

    }

    private User getUser() {
        return new User().id(nextId()).username("Username")
                .email("blah@blah.com").firstName("Firstname").lastName("Lastname").userStatus(1);
    }

}